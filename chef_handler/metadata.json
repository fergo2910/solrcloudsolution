{"name":"chef_handler","version":"3.0.3","description":"Distribute and enable Chef Exception and Report handlers","long_description":"# chef_handler Cookbook\n\n[![Build Status](https://travis-ci.org/chef-cookbooks/chef_handler.svg?branch=master)](https://travis-ci.org/chef-cookbooks/chef_handler) [![Cookbook Version](https://img.shields.io/cookbook/v/chef_handler.svg)](https://supermarket.chef.io/cookbooks/chef_handler)\n\nProvides a resource for installing and automatically loading [Chef report and exception handlers](http://docs.chef.io/handlers.html).\n\n## Deprecation\n\nThe chef_handler resource from this cookbook is now shipping as part of Chef 14\\. With the inclusion of this resource into Chef itself we are now deprecating this cookbook. It will continue to function for Chef 13 users, but will not be updated.\n\n## Requirements\n\n### Platforms\n\n- Debian/Ubuntu\n- RHEL/CentOS/Scientific/Amazon/Oracle\n- Windows\n\n### Chef\n\n- Chef 12.7+\n\n### Cookbooks\n\n- none\n\n## Attributes\n\n`node['chef_handler']['handler_path']` - location to drop off handlers directory, default is a folder named 'handlers' in Chef's file cache directory\n\n## Resources\n\n### chef_handler\n\nRequires, configures and enables handlers on the node for the current Chef run. Also has the ability to pass arguments to the handlers initializer. This allows initialization data to be pulled from a node's attribute data.\n\nIt is best to declare `chef_handler` resources early on in the compile phase so they are available to fire for any exceptions during the Chef run. If you have a base role you would want any recipes that register Chef handlers to come first in the run_list.\n\n#### Actions\n\n- `:enable:` Enables the Chef handler for the current Chef run on the current node\n- `:disable:` Disables the Chef handler for the current Chef run on the current node\n\n#### Attribute Parameters\n\n- `class_name:` name property. The name of the handler class (can be module name-spaced).\n- `source:` full path to the handler file. can also be a gem path if the handler ships as part of a Ruby gem. can also be nil, in which case the file must be loaded as a library.\n- `arguments:` an array of arguments to pass the handler's class initializer\n- `type:` type of Chef Handler to register as, i.e. :report, :exception or both. default is `:report => true, :exception => true`\n\n#### Example\n\n```ruby\n  # register the Chef::Handler::JsonFile handler\n  # that ships with the Chef gem\n  chef_handler 'Chef::Handler::JsonFile' do\n    source 'chef/handler/json_file'\n    arguments path: '/var/chef/reports'\n    action :enable\n  end\n\n  # do the same but during the compile phase\n  chef_handler 'Chef::Handler::JsonFile' do\n    source 'chef/handler/json_file'\n    arguments path: '/var/chef/reports'\n    action :nothing\n  end.run_action(:enable)\n\n  # handle exceptions only\n  chef_handler 'Chef::Handler::JsonFile' do\n    source 'chef/handler/json_file'\n    arguments path: '/var/chef/reports'\n    type exception: true\n    action :enable\n  end\n\n  # enable the MyCorp::MyLibraryHandler handler which was dropped off in a\n  # standard chef library file.\n  chef_handler 'MyCorp::MyLibraryHandler' do\n    action :enable\n  end\n```\n\n## Usage\n\n### default\n\nThis cookbook's default recipe has been deprecated. To setup your own handlers you should instead use the chef_handler resource documented above within your own cookbook to define handlers.\n\n### json_file\n\nLeverages the `chef_handler` LWRP to automatically register the `Chef::Handler::JsonFile` handler that ships as part of Chef. This handler serializes the run status data to a JSON file located at `/var/chef/reports`.\n\n## Unit Testing\n\nchef_handler provides built in [chefspec](https://github.com/chefspec/chefspec) matchers for assisting unit tests. These matchers will only be loaded if ChefSpec is already loaded. Following is an example of asserting against the jsonfile handler:\n\n```ruby\n  expect(runner).to enable_chef_handler('Chef::Handler::JsonFile').with(\n    source: 'chef/handler/json_file',\n    arguments: { path: '/var/chef/reports' },\n    type: { exception: true }\n  )\n```\n\n## License & Authors\n\n**Author:** Cookbook Engineering Team ([cookbooks@chef.io](mailto:cookbooks@chef.io))\n\n**Copyright:** 2011-2017, Chef Software, Inc.\n\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","maintainer":"Chef Software, Inc.","maintainer_email":"cookbooks@chef.io","license":"Apache-2.0","platforms":{"ubuntu":">= 0.0.0","debian":">= 0.0.0","redhat":">= 0.0.0","centos":">= 0.0.0","fedora":">= 0.0.0"},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{"chef_handler::json_file":"Enables Chef::Handler::JsonFile to serialize run status data to /var/chef/reports."},"source_url":"https://github.com/chef-cookbooks/chef_handler","issues_url":"https://github.com/chef-cookbooks/chef_handler/issues","chef_version":[[">= 12.7"]],"ohai_version":[]}